name: Build and Deploy Wheels

on:
  workflow_dispatch:
    inputs:
      package_name:
        description: 'Package name to build'
        required: true
      package_version:
        description: 'Package version to build'
        required: true

jobs:
  build-wheels:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm64, amd64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Package Wheel
        run: |
          cd packages/${{ github.event.inputs.package_name }}
          docker buildx build --platform linux/${{ matrix.arch }} \
          --build-arg PACKAGE_VERSION=${{ github.event.inputs.package_version }} \
          -t my-${{ github.event.inputs.package_name }}-builder:latest \
          --output type=local,dest=../../wheels .

      - name: Persist wheels directory
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: ./wheels/wheels/*.whl  # Only upload wheel files
          if-no-files-found: warn

  upload-wheels:
    runs-on: ubuntu-latest
    needs: build-wheels
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download wheels artifact
        uses: actions/download-artifact@v4
        with:
          name: wheels
          path: ./wheels

      - name: Upload wheels to GitHub Pages
        run: |
          ls -haltR .
          mkdir -p docs/${{ github.event.inputs.package_name }}/${{ github.event.inputs.package_version }}
          mv wheels/* docs/${{ github.event.inputs.package_name }}/${{ github.event.inputs.package_version }}/
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git add docs/
          git commit -m "Add wheels for ${{ github.event.inputs.package_name }} ${{ github.event.inputs.package_version }}"
          git push

      - name: Update index.html
        run: |
          cd docs/
          echo "<html><body><ul>" > index.html
          for package in $(ls -d */); do
            echo "<li>$package<ul>" >> index.html
            for version in $(ls -d $package/*); do
              echo "<li><a href=\"$version\">$version</a></li>" >> index.html
            done
            echo "</ul></li>" >> index.html
          done
          echo "</ul></body></html>" >> index.html
          git add index.html
          git commit -m "Update index.html"
          git push
