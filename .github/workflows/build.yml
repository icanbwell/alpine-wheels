name: Build and Deploy Wheels

on:
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version to use'
        required: true
        type: choice
        options:
          - 3.8
          - 3.9
          - 3.10
          - 3.11
          - 3.12
        default: '3.12'
      package_name:
        description: 'Package name to build'
        required: true
        type: choice
        options:
          - numpy
          - scipy
          - shapely
          - google-crc32c
          - grpcio
          - fastapi
          - pymongo
          - sentence-transformers
          - nltk
          - torch
          - python-crfsuite
      custom_package_name:
        description: 'Custom package name to build (if set, overrides package_name)'
        required: false
        type: string
      package_version:
        description: 'Package version to build'
        required: true

jobs:
  build-wheels:
    runs-on: ubuntu-latest
    name: ${{ matrix.arch }} ${{ github.event.inputs.package_name }} ${{ github.event.inputs.package_version }} on Python ${{ github.event.inputs.python_version }}
    strategy:
      matrix:
        arch: [arm64, amd64]
    steps:
      - name: Print input values
        run: |
          echo "Python Version: ${{ github.event.inputs.python_version }}"
          echo "Package Name: ${{ github.event.inputs.package_name }}"
          echo "Custom Package Name: ${{ github.event.inputs.custom_package_name }}"          
          echo "Package Version: ${{ github.event.inputs.package_version }}"

      - name: Determine Package Name
        id: package-name
        run: |
          if [ -n "${{ github.event.inputs.custom_package_name }}" ]; then
            echo "PACKAGE_NAME=${{ github.event.inputs.custom_package_name }}" >> $GITHUB_ENV
          else
            echo "PACKAGE_NAME=${{ github.event.inputs.package_name }}" >> $GITHUB_ENV
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull binfmt image
        run: docker pull docker.io/tonistiigi/binfmt:latest

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Package Wheel
        run: |
          PACKAGE_DOCKERFILE="packages/${{ env.PACKAGE_NAME }}/Dockerfile"
          if [ -f "$PACKAGE_DOCKERFILE" ]; then
            DOCKERFILE_PATH=$PACKAGE_DOCKERFILE
          else
            DOCKERFILE_PATH="packages/default/Dockerfile"
          fi

          docker buildx build --platform linux/${{ matrix.arch }} \
          --build-arg PACKAGE_NAME=${{ env.PACKAGE_NAME }} \
          --build-arg PACKAGE_VERSION=${{ github.event.inputs.package_version }} \
          --build-arg PYTHON_VERSION=${{ github.event.inputs.python_version }} \
          -f $DOCKERFILE_PATH \
          -t my-${{ env.PACKAGE_NAME }}-builder:latest \
          --output type=local,dest=./wheels_output .

      - name: Persist wheels directory
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.arch }}
          path: ./wheels_output/wheels/*.whl  # Only upload wheel files
          if-no-files-found: error

  upload-wheels:
    runs-on: ubuntu-latest
    needs: build-wheels
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set PACKAGE_NAME
        run: |
          if [ -n "${{ github.event.inputs.custom_package_name }}" ]; then
            echo "PACKAGE_NAME=${{ github.event.inputs.custom_package_name }}" >> $GITHUB_ENV
          else
            echo "PACKAGE_NAME=${{ github.event.inputs.package_name }}" >> $GITHUB_ENV
          fi

      - name: Download ${{ env.PACKAGE_NAME }} Wheels Artifact
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: ./wheels

      - name: Install Git LFS
        run: |
          git lfs install

      - name: Upload wheels to GitHub Pages
        run: |
          ls -haltR .
          mkdir -p docs/${{ env.PACKAGE_NAME }}
          mv -f wheels/* docs/${{ env.PACKAGE_NAME }}/
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git add docs/
          git commit -m "Add wheels for ${{ env.PACKAGE_NAME }} ${{ github.event.inputs.package_version }}"
          git pull --rebase origin main  # Pull the latest changes and rebase
          git push

      - name: Update index.html
        run: |
          cd docs/
          # Generate the root index.html
          echo "<html><body><ul>" > index.html
          for package in $(ls -d */); do
            package_name=${package%/}
            echo "<li><a href=\"$package_name/\">$package_name</a></li>" >> index.html
      
            # Generate index.html for each package
            mkdir -p "$package_name"
            echo "<html><body><h1>$package_name</h1><ul>" > "$package_name/index.html"
            for package_file in $(ls "${package_name}/"*.whl 2>/dev/null); do
             # Only include .whl files
              file_name=$(basename "$package_file")
              echo "<li><a href=\"https://github.com/imranq2/alpine-wheels/raw/main/docs/$package_name/$file_name\">$file_name</a></li>" >> "$package_name/index.html"
            done
            echo "</ul></body></html>" >> "$package_name/index.html"
          done
          echo "</ul></body></html>" >> index.html
      
          git add index.html */index.html
          git commit -m "Update package index files"
          git push
